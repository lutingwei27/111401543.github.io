{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/typing-game/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GamePage from './GamePage';\nimport TypingGame from './TypingGame';\nimport dataEng from './dataEng.json';\nimport dataCh from './dataCh.json';\nimport TypingEffect from './TypingEffect';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameText, setGameText] = useState('');\n  const [gameIndex, setGameIndex] = useState(0);\n  const [errorCount, setErrorCount] = useState(0);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [language, setLanguage] = useState('english');\n  const [length, setLength] = useState('long');\n  const [totalScore, setTotalScore] = useState(0);\n  const [usedTexts, setUsedTexts] = useState([]);\n  const [lastScore, setLastScore] = useState(0);\n  const [data, setData] = useState({\n    short: [],\n    medium: [],\n    long: []\n  });\n  useEffect(() => {\n    if (language === 'english') {\n      setData(dataEng);\n    } else {\n      setData(dataCh);\n    }\n  }, [language]);\n  const handleStartGame = () => {\n    const newText = getRandomText();\n    setGameStarted(true);\n    setGameText(newText);\n    setGameIndex(gameIndex + 1);\n    setShowResults(false);\n    setUsedTexts([...usedTexts, newText]);\n  };\n  const handleSubmit = (errors, time) => {\n    setErrorCount(errors);\n    setElapsedTime(time);\n    const wordCount = gameText.length;\n    const allowedTime = wordCount * 0.5;\n    const errorRate = errors / gameText.length * 100;\n    let score = 0;\n    if (errorRate <= 60) {\n      if (time <= allowedTime) {\n        score = 5;\n      } else if (time <= allowedTime + 5) {\n        score = 3;\n      } else if (time <= allowedTime + 10) {\n        score = 1;\n      } else if (time <= allowedTime + 15) {\n        score = 0.5;\n      }\n    }\n    score -= Math.ceil(errorRate / 5) * 0.5;\n    setLastScore(score);\n    setTotalScore(totalScore + score);\n    setShowResults(true);\n  };\n  const handleNextLevel = () => {\n    const newText = getRandomText();\n    setGameText(newText);\n    setGameStarted(true);\n    setShowResults(false);\n    setUsedTexts([...usedTexts, newText]);\n  };\n  const handleExitGame = () => {\n    if (window.confirm('你確定要離開遊戲嗎？這會清除當前成績。')) {\n      setGameStarted(false);\n      setShowResults(false);\n      setGameText('');\n      setGameIndex(0);\n      setErrorCount(0);\n      setElapsedTime(0);\n      setTotalScore(0);\n      setUsedTexts([]);\n      setLastScore(0);\n    }\n  };\n  const getRandomText = () => {\n    let selectedTexts = data[length];\n    const remainingTexts = selectedTexts.filter(text => !usedTexts.includes(text));\n    if (remainingTexts.length === 0) {\n      setUsedTexts([]);\n      return selectedTexts[Math.floor(Math.random() * selectedTexts.length)];\n    } else {\n      return remainingTexts[Math.floor(Math.random() * remainingTexts.length)];\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      autoPlay: true,\n      loop: true,\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: './public/IamDayLight.mp3',\n        type: \"audio/mpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), \"\\u4F60\\u7684\\u700F\\u89BD\\u5668\\u4E0D\\u652F\\u63F4\\u64AD\\u653E\\u6B64\\u97F3\\u6A02\\u3002\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), !gameStarted && !showResults && /*#__PURE__*/_jsxDEV(GamePage, {\n      onStartGame: handleStartGame,\n      setLanguage: setLanguage,\n      setLength: setLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 40\n    }, this), gameStarted && !showResults && /*#__PURE__*/_jsxDEV(TypingGame, {\n      text: gameText,\n      onSubmit: handleSubmit,\n      totalScore: totalScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 39\n    }, this), showResults && /*#__PURE__*/_jsxDEV(TypingEffect, {\n      errorCount: errorCount,\n      elapsedTime: elapsedTime,\n      errorRate: (errorCount / gameText.length * 100).toFixed(2),\n      lastScore: lastScore,\n      onNextLevel: handleNextLevel,\n      onExitGame: handleExitGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vN/C+AgP3mdkbGfFc78vZCEX3JE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GamePage","TypingGame","dataEng","dataCh","TypingEffect","jsxDEV","_jsxDEV","App","_s","gameStarted","setGameStarted","gameText","setGameText","gameIndex","setGameIndex","errorCount","setErrorCount","elapsedTime","setElapsedTime","showResults","setShowResults","language","setLanguage","length","setLength","totalScore","setTotalScore","usedTexts","setUsedTexts","lastScore","setLastScore","data","setData","short","medium","long","handleStartGame","newText","getRandomText","handleSubmit","errors","time","wordCount","allowedTime","errorRate","score","Math","ceil","handleNextLevel","handleExitGame","window","confirm","selectedTexts","remainingTexts","filter","text","includes","floor","random","className","children","autoPlay","loop","src","type","fileName","_jsxFileName","lineNumber","columnNumber","onStartGame","onSubmit","toFixed","onNextLevel","onExitGame","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/typing-game/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GamePage from './GamePage';\nimport TypingGame from './TypingGame';\nimport dataEng from './dataEng.json';\nimport dataCh from './dataCh.json';\nimport TypingEffect from './TypingEffect';\nimport './App.css';\n\nfunction App() {\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameText, setGameText] = useState('');\n  const [gameIndex, setGameIndex] = useState(0);\n  const [errorCount, setErrorCount] = useState(0);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [language, setLanguage] = useState('english');\n  const [length, setLength] = useState('long');\n  const [totalScore, setTotalScore] = useState(0);\n  const [usedTexts, setUsedTexts] = useState([]);\n  const [lastScore, setLastScore] = useState(0);\n  const [data, setData] = useState({ short: [], medium: [], long: [] });\n\n  useEffect(() => {\n    if (language === 'english') {\n      setData(dataEng);\n    } else {\n      setData(dataCh);\n    }\n  }, [language]);\n\n  const handleStartGame = () => {\n    const newText = getRandomText();\n    setGameStarted(true);\n    setGameText(newText);\n    setGameIndex(gameIndex + 1);\n    setShowResults(false);\n    setUsedTexts([...usedTexts, newText]);\n  };\n\n  const handleSubmit = (errors, time) => {\n    setErrorCount(errors);\n    setElapsedTime(time);\n\n    const wordCount = gameText.length;\n    const allowedTime = wordCount * 0.5;\n    const errorRate = (errors / gameText.length) * 100;\n    let score = 0;\n\n    if (errorRate <= 60) {\n      if (time <= allowedTime) {\n        score = 5;\n      } else if (time <= allowedTime + 5) {\n        score = 3;\n      } else if (time <= allowedTime + 10) {\n        score = 1;\n      } else if (time <= allowedTime + 15) {\n        score = 0.5;\n      }\n    }\n\n    score -= Math.ceil(errorRate / 5) * 0.5;\n    setLastScore(score);\n    setTotalScore(totalScore + score);\n    setShowResults(true);\n  };\n\n  const handleNextLevel = () => {\n    const newText = getRandomText();\n    setGameText(newText);\n    setGameStarted(true);\n    setShowResults(false);\n    setUsedTexts([...usedTexts, newText]);\n  };\n\n  const handleExitGame = () => {\n    if (window.confirm('你確定要離開遊戲嗎？這會清除當前成績。')) {\n      setGameStarted(false);\n      setShowResults(false);\n      setGameText('');\n      setGameIndex(0);\n      setErrorCount(0);\n      setElapsedTime(0);\n      setTotalScore(0);\n      setUsedTexts([]);\n      setLastScore(0);\n    }\n  };\n\n  const getRandomText = () => {\n    let selectedTexts = data[length];\n    const remainingTexts = selectedTexts.filter(text => !usedTexts.includes(text));\n\n    if (remainingTexts.length === 0) {\n      setUsedTexts([]);\n      return selectedTexts[Math.floor(Math.random() * selectedTexts.length)];\n    } else {\n      return remainingTexts[Math.floor(Math.random() * remainingTexts.length)];\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <audio autoPlay loop>\n        <source src={'./public/IamDayLight.mp3'} type=\"audio/mpeg\" />\n        你的瀏覽器不支援播放此音樂。\n      </audio>\n      {!gameStarted && !showResults && <GamePage onStartGame={handleStartGame} setLanguage={setLanguage} setLength={setLength} />}\n      {gameStarted && !showResults && <TypingGame text={gameText} onSubmit={handleSubmit} totalScore={totalScore} />}\n      {showResults && (\n        <TypingEffect\n          errorCount={errorCount}\n          elapsedTime={elapsedTime}\n          errorRate={(errorCount / gameText.length * 100).toFixed(2)}\n          lastScore={lastScore}\n          onNextLevel={handleNextLevel}\n          onExitGame={handleExitGame}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}