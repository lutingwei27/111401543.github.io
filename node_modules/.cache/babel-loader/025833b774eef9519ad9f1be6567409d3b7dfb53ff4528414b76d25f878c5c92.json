{"ast":null,"code":"import React,{useState,useEffect}from'react';import GamePage from'./GamePage';import TypingGame from'./TypingGame';import dataEng from'./dataEng.json';import dataCh from'./dataCh.json';import TypingEffect from'./TypingEffect';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[gameStarted,setGameStarted]=useState(false);const[gameText,setGameText]=useState('');const[gameIndex,setGameIndex]=useState(0);const[errorCount,setErrorCount]=useState(0);const[elapsedTime,setElapsedTime]=useState(0);const[showResults,setShowResults]=useState(false);const[language,setLanguage]=useState('english');const[length,setLength]=useState('long');const[totalScore,setTotalScore]=useState(0);const[usedTexts,setUsedTexts]=useState([]);const[lastScore,setLastScore]=useState(0);const[data,setData]=useState({short:[],medium:[],long:[]});useEffect(()=>{if(language==='english'){setData(dataEng);}else{setData(dataCh);}},[language]);const handleStartGame=()=>{const newText=getRandomText();setGameStarted(true);setGameText(newText);setGameIndex(gameIndex+1);setShowResults(false);setUsedTexts([...usedTexts,newText]);};const handleSubmit=(errors,time)=>{setErrorCount(errors);setElapsedTime(time);const wordCount=gameText.length;const allowedTime=wordCount*0.5;const errorRate=errors/gameText.length*100;let score=0;if(errorRate<=60){if(time<=allowedTime){score=5;}else if(time<=allowedTime+5){score=3;}else if(time<=allowedTime+10){score=1;}else if(time<=allowedTime+15){score=0.5;}}score-=Math.ceil(errorRate/5)*0.5;setLastScore(score);setTotalScore(totalScore+score);setShowResults(true);};const handleNextLevel=()=>{const newText=getRandomText();setGameText(newText);setGameStarted(true);setShowResults(false);setUsedTexts([...usedTexts,newText]);};const handleExitGame=()=>{if(window.confirm('你確定要離開遊戲嗎？這會清除當前成績。')){setGameStarted(false);setShowResults(false);setGameText('');setGameIndex(0);setErrorCount(0);setElapsedTime(0);setTotalScore(0);setUsedTexts([]);setLastScore(0);}};const getRandomText=()=>{let selectedTexts=data[length];const remainingTexts=selectedTexts.filter(text=>!usedTexts.includes(text));if(remainingTexts.length===0){setUsedTexts([]);return selectedTexts[Math.floor(Math.random()*selectedTexts.length)];}else{return remainingTexts[Math.floor(Math.random()*remainingTexts.length)];}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"audio\",{autoPlay:true,loop:true,children:[/*#__PURE__*/_jsx(\"source\",{src:'./public/IamDayLight.mp3',type:\"audio/mpeg\"}),\"\\u4F60\\u7684\\u700F\\u89BD\\u5668\\u4E0D\\u652F\\u63F4\\u64AD\\u653E\\u6B64\\u97F3\\u6A02\\u3002\"]}),!gameStarted&&!showResults&&/*#__PURE__*/_jsx(GamePage,{onStartGame:handleStartGame,setLanguage:setLanguage,setLength:setLength}),gameStarted&&!showResults&&/*#__PURE__*/_jsx(TypingGame,{text:gameText,onSubmit:handleSubmit,totalScore:totalScore}),showResults&&/*#__PURE__*/_jsx(TypingEffect,{errorCount:errorCount,elapsedTime:elapsedTime,errorRate:(errorCount/gameText.length*100).toFixed(2),lastScore:lastScore,onNextLevel:handleNextLevel,onExitGame:handleExitGame})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","GamePage","TypingGame","dataEng","dataCh","TypingEffect","jsx","_jsx","jsxs","_jsxs","App","gameStarted","setGameStarted","gameText","setGameText","gameIndex","setGameIndex","errorCount","setErrorCount","elapsedTime","setElapsedTime","showResults","setShowResults","language","setLanguage","length","setLength","totalScore","setTotalScore","usedTexts","setUsedTexts","lastScore","setLastScore","data","setData","short","medium","long","handleStartGame","newText","getRandomText","handleSubmit","errors","time","wordCount","allowedTime","errorRate","score","Math","ceil","handleNextLevel","handleExitGame","window","confirm","selectedTexts","remainingTexts","filter","text","includes","floor","random","className","children","autoPlay","loop","src","type","onStartGame","onSubmit","toFixed","onNextLevel","onExitGame"],"sources":["/Users/lutingwei/Desktop/typing-test/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GamePage from './GamePage';\nimport TypingGame from './TypingGame';\nimport dataEng from './dataEng.json';\nimport dataCh from './dataCh.json';\nimport TypingEffect from './TypingEffect';\nimport './App.css';\n\nfunction App() {\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameText, setGameText] = useState('');\n  const [gameIndex, setGameIndex] = useState(0);\n  const [errorCount, setErrorCount] = useState(0);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [language, setLanguage] = useState('english');\n  const [length, setLength] = useState('long');\n  const [totalScore, setTotalScore] = useState(0);\n  const [usedTexts, setUsedTexts] = useState([]);\n  const [lastScore, setLastScore] = useState(0);\n  const [data, setData] = useState({ short: [], medium: [], long: [] });\n\n  useEffect(() => {\n    if (language === 'english') {\n      setData(dataEng);\n    } else {\n      setData(dataCh);\n    }\n  }, [language]);\n\n  const handleStartGame = () => {\n    const newText = getRandomText();\n    setGameStarted(true);\n    setGameText(newText);\n    setGameIndex(gameIndex + 1);\n    setShowResults(false);\n    setUsedTexts([...usedTexts, newText]);\n  };\n\n  const handleSubmit = (errors, time) => {\n    setErrorCount(errors);\n    setElapsedTime(time);\n\n    const wordCount = gameText.length;\n    const allowedTime = wordCount * 0.5;\n    const errorRate = (errors / gameText.length) * 100;\n    let score = 0;\n\n    if (errorRate <= 60) {\n      if (time <= allowedTime) {\n        score = 5;\n      } else if (time <= allowedTime + 5) {\n        score = 3;\n      } else if (time <= allowedTime + 10) {\n        score = 1;\n      } else if (time <= allowedTime + 15) {\n        score = 0.5;\n      }\n    }\n\n    score -= Math.ceil(errorRate / 5) * 0.5;\n    setLastScore(score);\n    setTotalScore(totalScore + score);\n    setShowResults(true);\n  };\n\n  const handleNextLevel = () => {\n    const newText = getRandomText();\n    setGameText(newText);\n    setGameStarted(true);\n    setShowResults(false);\n    setUsedTexts([...usedTexts, newText]);\n  };\n\n  const handleExitGame = () => {\n    if (window.confirm('你確定要離開遊戲嗎？這會清除當前成績。')) {\n      setGameStarted(false);\n      setShowResults(false);\n      setGameText('');\n      setGameIndex(0);\n      setErrorCount(0);\n      setElapsedTime(0);\n      setTotalScore(0);\n      setUsedTexts([]);\n      setLastScore(0);\n    }\n  };\n\n  const getRandomText = () => {\n    let selectedTexts = data[length];\n    const remainingTexts = selectedTexts.filter(text => !usedTexts.includes(text));\n\n    if (remainingTexts.length === 0) {\n      setUsedTexts([]);\n      return selectedTexts[Math.floor(Math.random() * selectedTexts.length)];\n    } else {\n      return remainingTexts[Math.floor(Math.random() * remainingTexts.length)];\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <audio autoPlay loop>\n        <source src={'./public/IamDayLight.mp3'} type=\"audio/mpeg\" />\n        你的瀏覽器不支援播放此音樂。\n      </audio>\n      {!gameStarted && !showResults && <GamePage onStartGame={handleStartGame} setLanguage={setLanguage} setLength={setLength} />}\n      {gameStarted && !showResults && <TypingGame text={gameText} onSubmit={handleSubmit} totalScore={totalScore} />}\n      {showResults && (\n        <TypingEffect\n          errorCount={errorCount}\n          elapsedTime={elapsedTime}\n          errorRate={(errorCount / gameText.length * 100).toFixed(2)}\n          lastScore={lastScore}\n          onNextLevel={handleNextLevel}\n          onExitGame={handleExitGame}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}